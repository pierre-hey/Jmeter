<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group - init">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script"></stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler - INITIALISATION">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">log.info(&quot;########## INITIALISATION ##########&quot;);

// Initialisation des compteurs et du type de création de devis
props.put(&quot;autoCounter&quot;, 1);
props.put(&quot;aavCounter&quot;, 1);
props.put(&quot;contractType&quot;, &quot;aav&quot;);

// Initialisation des actions à effectuer sur le devis créé
props.put(&quot;doPropAuto&quot;, false);
props.put(&quot;doUpdateAuto&quot;, false);
props.put(&quot;doTransfoAuto&quot;, false);

props.put(&quot;doPropAav&quot;, false);
props.put(&quot;doUpdateAav&quot;, false);
props.put(&quot;doTransfoAav&quot;, false);




log.info(&quot;####################################&quot;);</stringProp>
          <stringProp name="scriptLanguage">java</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <intProp name="ThreadGroup.num_threads">20</intProp>
        <intProp name="ThreadGroup.ramp_time">5</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">5</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="GlobalVariable">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1041577817">CONTRACT_TYPE_AUTO</stringProp>
            <stringProp name="-1141978562">CONTRACT_TYPE_AAV</stringProp>
            <stringProp name="900157321">customerName</stringProp>
            <stringProp name="-747889643">globalPrefix</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="377942739">
              <stringProp name="3005871">auto</stringProp>
              <stringProp name="96342">aav</stringProp>
              <stringProp name="0"></stringProp>
              <stringProp name="-1709742408">globalPrefix-</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Debug response code">
          <collectionProp name="UserParameters.names">
            <stringProp name="-1449757368">createClientResponse</stringProp>
          </collectionProp>
          <collectionProp name="UserParameters.thread_values">
            <collectionProp name="1841707302">
              <stringProp name="49587">201</stringProp>
            </collectionProp>
          </collectionProp>
          <boolProp name="UserParameters.per_iteration">false</boolProp>
        </UserParameters>
        <hashTree/>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Création client">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Main Script">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
final int MODULO_CONTRACT_TYPE = 2;

final int MODULO_AUTO_UPDATE = 2;
final int MODULO_AUTO_PROP = 5;
final int MODULO_AUTO_TRANSFO = 10;

final int MODULO_AAV_UPDATE = 2;
final int MODULO_AAV_PROP = 5;
final int MODULO_AAV_TRANSFO = 10;

final boolean AUTO_ONLY = false;

// Compteur
String globalCounter = vars.get(&quot;globalCounter&quot;);
Integer globalCounterInt = Integer.parseInt(globalCounter);
Integer autoCounter =  props.get(&quot;autoCounter&quot;);
Integer aavCounter =  props.get(&quot;aavCounter&quot;);

// Randomisation nom client
String rdmString = &quot;${__RandomString(4,abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789)}&quot;;
String globalPrefix = vars.get(&quot;globalPrefix&quot;);

// Reset des triggers &amp; prefix
boolean doTransfoAuto = false;
boolean doPropAuto = false;
boolean doUpdateAuto = false;

boolean doTransfoAav = false;
boolean doPropAav = false;
boolean doUpdateAav = false;
String prefix = &quot;&quot;;

log.info(&quot;************************* Création client script *************************&quot;);
log.info(&quot;globalCounter= &quot; + globalCounter);
log.info(&quot;autoCounter= &quot; + autoCounter);
log.info(&quot;aavCounter= &quot; + aavCounter);
log.info(&quot;contractType= &quot; + props.get(&quot;contractType&quot;));

//String simpleName = vars.get(&quot;globalCounter&quot;).getClass().getSimpleName();
//log.info(&quot;globalCounter Class= &quot; + simpleName);


if(globalCounterInt % MODULO_CONTRACT_TYPE == 0 &amp;&amp; !AUTO_ONLY){
	props.put(&quot;contractType&quot;, &quot;aav&quot;);
	if(aavCounter % MODULO_AAV_TRANSFO == 0){		
		doTransfoAav = true;
		prefix = &quot;C-&quot;;
		log.info(&quot;doTransfoAav trigger&quot;);
	}	
	else if(aavCounter % MODULO_AAV_PROP == 0 &amp;&amp; !doTransfoAav){
		doPropAav = true;
		prefix = &quot;P-&quot;;
		log.info(&quot;doPropAav trigger&quot;);
	}	
	else if(aavCounter % MODULO_AAV_UPDATE == 0 &amp;&amp; !doTransfoAav &amp;&amp; !doPropAav){
		doUpdateAav = true;
		prefix = &quot;M-&quot;;
		log.info(&quot;doUpdateAav trigger&quot;);
	}
	
	
}else{
	
	props.put(&quot;contractType&quot;, &quot;auto&quot;);
	if(autoCounter % MODULO_AUTO_TRANSFO == 0){		
		doTransfoAuto = true;
		prefix = &quot;C-&quot;;
		log.info(&quot;doTransfoAuto trigger&quot;);
	}	
	else if(autoCounter % MODULO_AUTO_PROP == 0 &amp;&amp; !doTransfoAuto){
		doPropAuto = true;
		prefix = &quot;P-&quot;;
		log.info(&quot;doPropAuto trigger&quot;);
	}	
	else if(autoCounter % MODULO_AUTO_UPDATE == 0 &amp;&amp; !doTransfoAuto &amp;&amp; !doPropAuto){
		doUpdateAuto = true;
		prefix = &quot;M-&quot;;
		log.info(&quot;doUpdateAuto trigger&quot;);
	}
	
}

// MAJ les triggers des actions à faire
props.put(&quot;doTransfoAuto&quot;, doTransfoAuto);
props.put(&quot;doPropAuto&quot;, doPropAuto);
props.put(&quot;doUpdateAuto&quot;, doUpdateAuto);

props.put(&quot;doTransfoAav&quot;, doTransfoAav);
props.put(&quot;doPropAav&quot;, doPropAav);
props.put(&quot;doUpdateAav&quot;, doUpdateAav);

// Concaténe nom client
String completeName = globalPrefix + prefix + rdmString;
vars.put(&quot;customerName&quot;,completeName);
log.info(&quot;customerName= &quot; + completeName);



</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="globalCounter">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">globalCounter</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Si création client ok">
          <stringProp name="IfController.condition">${__jexl3( ${createClientResponse} == &quot;201&quot; ,)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Si déclencheur CREATION devis AUTO">
            <stringProp name="IfController.condition">${__jexl3(props.get(&quot;contractType&quot;).equals(vars.get(&quot;CONTRACT_TYPE_AUTO&quot;)))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Création devis auto">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Script incr autoCounter">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;#### Script Création devis auto ####&quot;);
log.info(&quot;contractType= &quot; + props.get(&quot;contractType&quot;) );

Integer autoCounter = props.get(&quot;autoCounter&quot;);
autoCounter++;
props.put(&quot;autoCounter&quot;, autoCounter);

log.info(&quot;####                            ####&quot;);</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Si déclencheur TRANSFORMATION devis AUTO">
              <stringProp name="IfController.condition">${__jexl3(props.get(&quot;doTransfoAuto&quot;) == true)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Transformation devis auto">
                <boolProp name="displayJMeterProperties">true</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Si déclencheur MODIFICATION devis AUTO">
              <stringProp name="IfController.condition">${__jexl3(props.get(&quot;doUpdateAuto&quot;) == true)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Modification devis auto">
                <boolProp name="displayJMeterProperties">true</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Si déclencheur PROPOSITION devis AUTO">
              <stringProp name="IfController.condition">${__jexl3(props.get(&quot;doPropAuto&quot;) == true)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Proposition devis auto">
                <boolProp name="displayJMeterProperties">true</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Si déclencheur création devis aav">
            <stringProp name="IfController.condition">${__jexl3(props.get(&quot;contractType&quot;).equals(vars.get(&quot;CONTRACT_TYPE_AAV&quot;)))}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Création devis aav">
              <boolProp name="displayJMeterProperties">true</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Script incr aavCounter">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">log.info(&quot;#### Script Création devis aav ####&quot;);
log.info(&quot;contractType= &quot; + props.get(&quot;contractType&quot;) );

Integer aavCounter = props.get(&quot;aavCounter&quot;);
aavCounter++;
props.put(&quot;aavCounter&quot;, aavCounter);

log.info(&quot;####                            ####&quot;);</stringProp>
                <stringProp name="scriptLanguage">java</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Si déclencheur TRANSFORMATION devis AAV">
              <stringProp name="IfController.condition">${__jexl3(props.get(&quot;doTransfoAav&quot;) == true)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Transformation devis aav">
                <boolProp name="displayJMeterProperties">true</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Si déclencheur MODIFICATION devis AUTO">
              <stringProp name="IfController.condition">${__jexl3(props.get(&quot;doUpdateAav&quot;) == true)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Modification devis aav">
                <boolProp name="displayJMeterProperties">true</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Si déclencheur PROPOSITION devis AUTO">
              <stringProp name="IfController.condition">${__jexl3(props.get(&quot;doPropAav&quot;) == true)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Proposition devis aav">
                <boolProp name="displayJMeterProperties">true</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ConfigTestElement guiclass="PropertyControlGui" testclass="ConfigTestElement" testname="Property Display"/>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
